{"ast":null,"code":"//This file is where you connect all your reducers & stuff like that. Batman\nimport { createStore, combineReducers, applyMiddleware } from 'redux';\nimport thunk from 'redux-thunk';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport { productListReducer, productDetailsReducer } from './reducers/productReducers';\nimport { cartReducer } from './reducers/cartReducers';\nimport { userLoginReducer, userRegisterReducer, userUpdateReducer, userDetailsReducer, userUpdateProfileReducer, userListReducer, userDeleteReducer } from './reducers/usersReducers';\nimport { orderCreateReducer, orderDetailsReducer, orderListMyReducer, orderPayReducer } from './reducers/orderReducers';\nconst reducer = combineReducers({\n  productList: productListReducer,\n  productDetails: productDetailsReducer,\n  cart: cartReducer,\n  userLogin: userLoginReducer,\n  userRegister: userRegisterReducer,\n  userList: userListReducer,\n  userDelete: userDeleteReducer,\n  userDetails: userDetailsReducer,\n  userUpdate: userUpdateReducer,\n  userUpdateProfile: userUpdateProfileReducer,\n  orderCreate: orderCreateReducer,\n  orderPay: orderPayReducer,\n  orderListMy: orderListMyReducer,\n  orderDetails: orderDetailsReducer\n});\nconst cartItemsFromStorage = localStorage.getItem('cartItems') ? JSON.parse(localStorage.getItem('cartItems')) : [];\nconst userInfoFromStorage = localStorage.getItem('userInfo') ? JSON.parse(localStorage.getItem('userInfo')) : [];\nconst shippingAddressFromStorage = localStorage.getItem('shippingAddress ') ? JSON.parse(localStorage.getItem('shippingAddress ')) : {};\nconst initialState = {\n  cartItems: {\n    cartItemsFromStorage\n  },\n  shippingAddress: {\n    shippingAddressFromStorage\n  },\n  userLogin: {\n    userInfo: userInfoFromStorage\n  }\n};\nconst middleware = [thunk];\nconst store = createStore(reducer, initialState, composeWithDevTools(applyMiddleware(...middleware)));\nexport default store;","map":{"version":3,"sources":["/Users/chadhindsight/Desktop/pro-shop/frontend/src/store.js"],"names":["createStore","combineReducers","applyMiddleware","thunk","composeWithDevTools","productListReducer","productDetailsReducer","cartReducer","userLoginReducer","userRegisterReducer","userUpdateReducer","userDetailsReducer","userUpdateProfileReducer","userListReducer","userDeleteReducer","orderCreateReducer","orderDetailsReducer","orderListMyReducer","orderPayReducer","reducer","productList","productDetails","cart","userLogin","userRegister","userList","userDelete","userDetails","userUpdate","userUpdateProfile","orderCreate","orderPay","orderListMy","orderDetails","cartItemsFromStorage","localStorage","getItem","JSON","parse","userInfoFromStorage","shippingAddressFromStorage","initialState","cartItems","shippingAddress","userInfo","middleware","store"],"mappings":"AAAA;AACA,SAASA,WAAT,EAAsBC,eAAtB,EAAuCC,eAAvC,QAA8D,OAA9D;AACA,OAAOC,KAAP,MAAkB,aAAlB;AACA,SAASC,mBAAT,QAAoC,0BAApC;AACA,SAASC,kBAAT,EAA6BC,qBAA7B,QAA0D,4BAA1D;AACA,SAASC,WAAT,QAA4B,yBAA5B;AACA,SACIC,gBADJ,EAEIC,mBAFJ,EAGIC,iBAHJ,EAIIC,kBAJJ,EAKIC,wBALJ,EAMIC,eANJ,EAMqBC,iBANrB,QAOO,0BAPP;AASA,SAASC,kBAAT,EAA6BC,mBAA7B,EAAkDC,kBAAlD,EAAsEC,eAAtE,QAA6F,0BAA7F;AAEA,MAAMC,OAAO,GAAGlB,eAAe,CAAC;AAC5BmB,EAAAA,WAAW,EAAEf,kBADe;AAE5BgB,EAAAA,cAAc,EAAEf,qBAFY;AAG5BgB,EAAAA,IAAI,EAAEf,WAHsB;AAI5BgB,EAAAA,SAAS,EAAEf,gBAJiB;AAK5BgB,EAAAA,YAAY,EAAEf,mBALc;AAM5BgB,EAAAA,QAAQ,EAAEZ,eANkB;AAO5Ba,EAAAA,UAAU,EAAEZ,iBAPgB;AAQ5Ba,EAAAA,WAAW,EAAEhB,kBARe;AAS5BiB,EAAAA,UAAU,EAAElB,iBATgB;AAU5BmB,EAAAA,iBAAiB,EAAEjB,wBAVS;AAW5BkB,EAAAA,WAAW,EAAEf,kBAXe;AAY5BgB,EAAAA,QAAQ,EAAEb,eAZkB;AAa5Bc,EAAAA,WAAW,EAAEf,kBAbe;AAc5BgB,EAAAA,YAAY,EAAEjB;AAdc,CAAD,CAA/B;AAiBA,MAAMkB,oBAAoB,GAAGC,YAAY,CAACC,OAAb,CAAqB,WAArB,IACvBC,IAAI,CAACC,KAAL,CAAWH,YAAY,CAACC,OAAb,CAAqB,WAArB,CAAX,CADuB,GAEvB,EAFN;AAIA,MAAMG,mBAAmB,GAAGJ,YAAY,CAACC,OAAb,CAAqB,UAArB,IACtBC,IAAI,CAACC,KAAL,CAAWH,YAAY,CAACC,OAAb,CAAqB,UAArB,CAAX,CADsB,GAEtB,EAFN;AAIA,MAAMI,0BAA0B,GAAGL,YAAY,CAACC,OAAb,CAAqB,kBAArB,IAC7BC,IAAI,CAACC,KAAL,CAAWH,YAAY,CAACC,OAAb,CAAqB,kBAArB,CAAX,CAD6B,GAE7B,EAFN;AAKA,MAAMK,YAAY,GAAG;AACjBC,EAAAA,SAAS,EAAE;AAAER,IAAAA;AAAF,GADM;AAEjBS,EAAAA,eAAe,EAAE;AAAEH,IAAAA;AAAF,GAFA;AAGjBjB,EAAAA,SAAS,EAAE;AAAEqB,IAAAA,QAAQ,EAAEL;AAAZ;AAHM,CAArB;AAKA,MAAMM,UAAU,GAAG,CAAC1C,KAAD,CAAnB;AAEA,MAAM2C,KAAK,GAAG9C,WAAW,CACrBmB,OADqB,EAErBsB,YAFqB,EAGrBrC,mBAAmB,CAACF,eAAe,CAAC,GAAG2C,UAAJ,CAAhB,CAHE,CAAzB;AAMA,eAAeC,KAAf","sourcesContent":["//This file is where you connect all your reducers & stuff like that. Batman\nimport { createStore, combineReducers, applyMiddleware } from 'redux';\nimport thunk from 'redux-thunk';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport { productListReducer, productDetailsReducer } from './reducers/productReducers';\nimport { cartReducer } from './reducers/cartReducers';\nimport {\n    userLoginReducer,\n    userRegisterReducer,\n    userUpdateReducer,\n    userDetailsReducer,\n    userUpdateProfileReducer,\n    userListReducer, userDeleteReducer\n} from './reducers/usersReducers';\n\nimport { orderCreateReducer, orderDetailsReducer, orderListMyReducer, orderPayReducer } from './reducers/orderReducers';\n\nconst reducer = combineReducers({\n    productList: productListReducer,\n    productDetails: productDetailsReducer,\n    cart: cartReducer,\n    userLogin: userLoginReducer,\n    userRegister: userRegisterReducer,\n    userList: userListReducer,\n    userDelete: userDeleteReducer,\n    userDetails: userDetailsReducer,\n    userUpdate: userUpdateReducer,\n    userUpdateProfile: userUpdateProfileReducer,\n    orderCreate: orderCreateReducer,\n    orderPay: orderPayReducer,\n    orderListMy: orderListMyReducer,\n    orderDetails: orderDetailsReducer,\n})\n\nconst cartItemsFromStorage = localStorage.getItem('cartItems')\n    ? JSON.parse(localStorage.getItem('cartItems'))\n    : []\n\nconst userInfoFromStorage = localStorage.getItem('userInfo')\n    ? JSON.parse(localStorage.getItem('userInfo'))\n    : []\n\nconst shippingAddressFromStorage = localStorage.getItem('shippingAddress ')\n    ? JSON.parse(localStorage.getItem('shippingAddress '))\n    : {}\n\n\nconst initialState = {\n    cartItems: { cartItemsFromStorage },\n    shippingAddress: { shippingAddressFromStorage },\n    userLogin: { userInfo: userInfoFromStorage }\n}\nconst middleware = [thunk]\n\nconst store = createStore(\n    reducer,\n    initialState,\n    composeWithDevTools(applyMiddleware(...middleware))\n)\n\nexport default store;"]},"metadata":{},"sourceType":"module"}