{"ast":null,"code":"import Axios from \"axios\";\nimport { USER_DETAILS_FAIL, USER_DETAILS_REQUEST, USER_DETAILS_RESET, USER_DETAILS_SUCCESS, USER_LIST_FAIL, USER_LIST_RESET, USER_LIST_SUCCESS, USER_LOGIN_FAIL, USER_LOGIN_REQUEST, USER_LOGIN_SUCCESS, USER_LOGOUT, USER_REGISTER_FAIL, USER_REGISTER_REQUEST, USER_REGISTER_SUCCESS, USER_UPDATE_PROFILE_FAIL, USER_UPDATE_PROFILE_REQUEST, USER_UPDATE_PROFILE_SUCCESS } from \"../constants/userConstants\";\nexport const login = (email, password) => async dispatch => {\n  try {\n    dispatch({\n      type: USER_LOGIN_REQUEST\n    });\n    const config = {\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    };\n    const {\n      data\n    } = await Axios.post('/api/users/login', {\n      email,\n      password\n    }, config);\n    dispatch({\n      type: USER_LOGIN_SUCCESS,\n      payload: data\n    });\n    localStorage.setItem('userInfo', JSON.stringify(data));\n  } catch (error) {\n    dispatch({\n      type: USER_LOGIN_FAIL,\n      payload: error.response && error.response.data.message ? error.response.data.message : error.message\n    });\n  }\n}; // Logs a user out\n\nexport const logout = () => dispatch => {\n  localStorage.removeItem('userInfo');\n  dispatch({\n    type: USER_LOGOUT\n  });\n  dispatch({\n    type: USER_DETAILS_RESET\n  });\n  dispatch({\n    type: USER_LIST_RESET\n  });\n};\nexport const register = (name, email, password) => async dispatch => {\n  try {\n    dispatch({\n      type: USER_REGISTER_REQUEST\n    });\n    const config = {\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    };\n    const {\n      data\n    } = await Axios.post('/api/users', {\n      name,\n      email,\n      password\n    }, config);\n    dispatch({\n      type: USER_REGISTER_SUCCESS,\n      payload: data\n    }); // After registering, login\n\n    dispatch({\n      type: USER_LOGIN_SUCCESS,\n      payload: data\n    });\n    localStorage.setItem('userInfo', JSON.stringify(data));\n  } catch (error) {\n    dispatch({\n      type: USER_REGISTER_FAIL,\n      payload: error.response && error.response.data.message ? error.response.data.message : error.message\n    });\n  }\n};\nexport const getUserDetails = id => async (dispatch, getState) => {\n  try {\n    dispatch({\n      type: USER_DETAILS_REQUEST\n    });\n    const {\n      userLogin: {\n        userInfo\n      }\n    } = getState();\n    const config = {\n      headers: {\n        Authorization: `Bearer ${userInfo.token}`\n      }\n    };\n    const {\n      data\n    } = await Axios.get(`/api/users/${id}`, config);\n    dispatch({\n      type: USER_DETAILS_SUCCESS,\n      payload: data\n    });\n  } catch (error) {\n    const message = error.response && error.response.data.message ? error.response.data.message : error.message;\n\n    if (message === 'Not authorized, token failed') {\n      dispatch(logout());\n    }\n\n    dispatch({\n      type: USER_DETAILS_FAIL,\n      payload: message\n    });\n  }\n};\nexport const updateUserProfile = user => async (dispatch, getState) => {\n  try {\n    dispatch({\n      type: USER_UPDATE_PROFILE_REQUEST\n    });\n    const {\n      userLogin: {\n        userInfo\n      }\n    } = getState();\n    const config = {\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: `Bearer ${userInfo.token}`\n      }\n    };\n    const {\n      data\n    } = await Axios.put(`/api/users/profile`, user, config);\n    dispatch({\n      type: USER_UPDATE_PROFILE_SUCCESS,\n      payload: data\n    });\n    dispatch({\n      type: USER_LOGIN_SUCCESS,\n      payload: data\n    });\n    localStorage.setItem('userInfo', JSON.stringify(data));\n  } catch (error) {\n    const message = error.response && error.response.data.message ? error.response.data.message : error.message;\n\n    if (message === 'Not authorized, token failed') {\n      dispatch(logout());\n    }\n\n    dispatch({\n      type: USER_UPDATE_PROFILE_FAIL,\n      payload: message\n    });\n  }\n};\nexport const listUsers = () => async (dispatch, getState) => {\n  try {\n    dispatch({\n      type: USER_LIST_REQUEST\n    });\n    const {\n      userLogin: {\n        userInfo\n      }\n    } = getState();\n    const config = {\n      headers: {\n        Authorization: `Bearer ${userInfo.token}`\n      }\n    };\n    const {\n      data\n    } = await axios.get(`/api/users`, config);\n    dispatch({\n      type: USER_LIST_SUCCESS,\n      payload: data\n    });\n  } catch (error) {\n    const message = error.response && error.response.data.message ? error.response.data.message : error.message;\n\n    if (message === 'Not authorized, token failed') {\n      dispatch(logout());\n    }\n\n    dispatch({\n      type: USER_LIST_FAIL,\n      payload: message\n    });\n  }\n};","map":{"version":3,"sources":["/Users/chadhindsight/Desktop/pro-shop/frontend/src/actions/userActions.js"],"names":["Axios","USER_DETAILS_FAIL","USER_DETAILS_REQUEST","USER_DETAILS_RESET","USER_DETAILS_SUCCESS","USER_LIST_FAIL","USER_LIST_RESET","USER_LIST_SUCCESS","USER_LOGIN_FAIL","USER_LOGIN_REQUEST","USER_LOGIN_SUCCESS","USER_LOGOUT","USER_REGISTER_FAIL","USER_REGISTER_REQUEST","USER_REGISTER_SUCCESS","USER_UPDATE_PROFILE_FAIL","USER_UPDATE_PROFILE_REQUEST","USER_UPDATE_PROFILE_SUCCESS","login","email","password","dispatch","type","config","headers","data","post","payload","localStorage","setItem","JSON","stringify","error","response","message","logout","removeItem","register","name","getUserDetails","id","getState","userLogin","userInfo","Authorization","token","get","updateUserProfile","user","put","listUsers","USER_LIST_REQUEST","axios"],"mappings":"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","sourcesContent":["import Axios from \"axios\"\nimport { USER_DETAILS_FAIL, USER_DETAILS_REQUEST, USER_DETAILS_RESET, USER_DETAILS_SUCCESS, USER_LIST_FAIL, USER_LIST_RESET, USER_LIST_SUCCESS, USER_LOGIN_FAIL, USER_LOGIN_REQUEST, USER_LOGIN_SUCCESS, USER_LOGOUT, USER_REGISTER_FAIL, USER_REGISTER_REQUEST, USER_REGISTER_SUCCESS, USER_UPDATE_PROFILE_FAIL, USER_UPDATE_PROFILE_REQUEST, USER_UPDATE_PROFILE_SUCCESS } from \"../constants/userConstants\"\n\nexport const login = (email, password) => async (dispatch) => {\n    try {\n        dispatch({\n            type: USER_LOGIN_REQUEST,\n        })\n\n        const config = {\n            headers: {\n                'Content-Type': 'application/json',\n            },\n        }\n\n        const { data } = await Axios.post(\n            '/api/users/login',\n            { email, password },\n            config\n        )\n\n        dispatch({\n            type: USER_LOGIN_SUCCESS,\n            payload: data,\n        })\n\n        localStorage.setItem('userInfo', JSON.stringify(data))\n    } catch (error) {\n        dispatch({\n            type: USER_LOGIN_FAIL,\n            payload:\n                error.response && error.response.data.message\n                    ? error.response.data.message\n                    : error.message,\n        })\n    }\n}\n// Logs a user out\nexport const logout = () => (dispatch) => {\n    localStorage.removeItem('userInfo')\n    dispatch({ type: USER_LOGOUT })\n    dispatch({ type: USER_DETAILS_RESET })\n    dispatch({ type: USER_LIST_RESET })\n}\n\nexport const register = (name, email, password) => async (dispatch) => {\n    try {\n        dispatch({\n            type: USER_REGISTER_REQUEST,\n        })\n\n        const config = {\n            headers: {\n                'Content-Type': 'application/json',\n            },\n        }\n\n        const { data } = await Axios.post(\n            '/api/users',\n            { name, email, password },\n            config\n        )\n\n        dispatch({\n            type: USER_REGISTER_SUCCESS,\n            payload: data,\n        })\n        // After registering, login\n        dispatch({\n            type: USER_LOGIN_SUCCESS,\n            payload: data,\n        })\n\n        localStorage.setItem('userInfo', JSON.stringify(data))\n    } catch (error) {\n        dispatch({\n            type: USER_REGISTER_FAIL,\n            payload:\n                error.response && error.response.data.message\n                    ? error.response.data.message\n                    : error.message,\n        })\n    }\n}\n\nexport const getUserDetails = (id) => async (dispatch, getState) => {\n    try {\n        dispatch({\n            type: USER_DETAILS_REQUEST,\n        })\n\n        const {\n            userLogin: { userInfo },\n        } = getState()\n\n        const config = {\n            headers: {\n                Authorization: `Bearer ${userInfo.token}`,\n            },\n        }\n\n        const { data } = await Axios.get(`/api/users/${id}`, config)\n\n        dispatch({\n            type: USER_DETAILS_SUCCESS,\n            payload: data,\n        })\n    } catch (error) {\n        const message =\n            error.response && error.response.data.message\n                ? error.response.data.message\n                : error.message\n        if (message === 'Not authorized, token failed') {\n            dispatch(logout())\n        }\n        dispatch({\n            type: USER_DETAILS_FAIL,\n            payload: message,\n        })\n    }\n}\n\nexport const updateUserProfile = (user) => async (dispatch, getState) => {\n    try {\n        dispatch({\n            type: USER_UPDATE_PROFILE_REQUEST,\n        })\n\n        const {\n            userLogin: { userInfo },\n        } = getState()\n\n        const config = {\n            headers: {\n                'Content-Type': 'application/json',\n                Authorization: `Bearer ${userInfo.token}`,\n            },\n        }\n\n        const { data } = await Axios.put(`/api/users/profile`, user, config)\n\n        dispatch({\n            type: USER_UPDATE_PROFILE_SUCCESS,\n            payload: data,\n        })\n        dispatch({\n            type: USER_LOGIN_SUCCESS,\n            payload: data,\n        })\n        localStorage.setItem('userInfo', JSON.stringify(data))\n    } catch (error) {\n        const message =\n            error.response && error.response.data.message\n                ? error.response.data.message\n                : error.message\n        if (message === 'Not authorized, token failed') {\n            dispatch(logout())\n        }\n        dispatch({\n            type: USER_UPDATE_PROFILE_FAIL,\n            payload: message,\n        })\n    }\n}\n\nexport const listUsers = () => async (dispatch, getState) => {\n    try {\n        dispatch({\n            type: USER_LIST_REQUEST,\n        })\n\n        const {\n            userLogin: { userInfo },\n        } = getState()\n\n        const config = {\n            headers: {\n                Authorization: `Bearer ${userInfo.token}`,\n            },\n        }\n\n        const { data } = await axios.get(`/api/users`, config)\n\n        dispatch({\n            type: USER_LIST_SUCCESS,\n            payload: data,\n        })\n    } catch (error) {\n        const message =\n            error.response && error.response.data.message\n                ? error.response.data.message\n                : error.message\n        if (message === 'Not authorized, token failed') {\n            dispatch(logout())\n        }\n        dispatch({\n            type: USER_LIST_FAIL,\n            payload: message,\n        })\n    }\n}"]},"metadata":{},"sourceType":"module"}