{"ast":null,"code":"//This file is where you connect all your reducers & stuff like that. Batman\nimport { createStore, combineReducers, applyMiddleware } from 'redux';\nimport thunk from 'redux-thunk';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport { productListReducer, productDetailsReducer } from './reducers/productReducers';\nimport { cartReducer } from './reducers/cartReducers';\nimport { userLoginReducer, userRegisterReducer, userDetailsReducer, userUpdateProfileReducer } from './reducers/usersReducers';\nimport { orderCreateReducer, orderDetailsReducer, orderPayReducer } from './reducers/orderReducers';\nconst reducer = combineReducers({\n  productList: productListReducer,\n  productDetails: productDetailsReducer,\n  cart: cartReducer,\n  userLogin: userLoginReducer,\n  userRegister: userRegisterReducer,\n  userDetails: userDetailsReducer,\n  userUpdateProfile: userUpdateProfileReducer,\n  orderCreate: orderCreateReducer,\n  orderPay: orderPayReducer,\n  orderDetails: orderDetailsReducer\n});\nconst cartItemsFromStorage = localStorage.getItem('cartItems') ? JSON.parse(localStorage.getItem('cartItems')) : [];\nconst userInfoFromStorage = localStorage.getItem('userInfo') ? JSON.parse(localStorage.getItem('userInfo')) : [];\nconst shippingAddressFromStorage = localStorage.getItem('shippingAddress ') ? JSON.parse(localStorage.getItem('shippingAddress ')) : {};\nconst initialState = {\n  cartItems: {\n    cartItemsFromStorage\n  },\n  shippingAddress: {\n    shippingAddressFromStorage\n  },\n  userLogin: {\n    userInfo: userInfoFromStorage\n  }\n};\nconst middleware = [thunk];\nconst store = createStore(reducer, initialState, composeWithDevTools(applyMiddleware(...middleware)));\nexport default store;","map":{"version":3,"sources":["/Users/chadhindsight/Desktop/pro-shop/frontend/src/store.js"],"names":["createStore","combineReducers","applyMiddleware","thunk","composeWithDevTools","productListReducer","productDetailsReducer","cartReducer","userLoginReducer","userRegisterReducer","userDetailsReducer","userUpdateProfileReducer","orderCreateReducer","orderDetailsReducer","orderPayReducer","reducer","productList","productDetails","cart","userLogin","userRegister","userDetails","userUpdateProfile","orderCreate","orderPay","orderDetails","cartItemsFromStorage","localStorage","getItem","JSON","parse","userInfoFromStorage","shippingAddressFromStorage","initialState","cartItems","shippingAddress","userInfo","middleware","store"],"mappings":"AAAA;AACA,SAASA,WAAT,EAAsBC,eAAtB,EAAuCC,eAAvC,QAA8D,OAA9D;AACA,OAAOC,KAAP,MAAkB,aAAlB;AACA,SAASC,mBAAT,QAAoC,0BAApC;AACA,SAASC,kBAAT,EAA6BC,qBAA7B,QAA0D,4BAA1D;AACA,SAASC,WAAT,QAA4B,yBAA5B;AACA,SAASC,gBAAT,EAA2BC,mBAA3B,EAAgDC,kBAAhD,EAAoEC,wBAApE,QAAoG,0BAApG;AACA,SAASC,kBAAT,EAA6BC,mBAA7B,EAAkDC,eAAlD,QAAyE,0BAAzE;AACA,MAAMC,OAAO,GAAGd,eAAe,CAAC;AAC5Be,EAAAA,WAAW,EAAEX,kBADe;AAE5BY,EAAAA,cAAc,EAAEX,qBAFY;AAG5BY,EAAAA,IAAI,EAAEX,WAHsB;AAI5BY,EAAAA,SAAS,EAAEX,gBAJiB;AAK5BY,EAAAA,YAAY,EAAEX,mBALc;AAM5BY,EAAAA,WAAW,EAAEX,kBANe;AAO5BY,EAAAA,iBAAiB,EAAEX,wBAPS;AAQ5BY,EAAAA,WAAW,EAAEX,kBARe;AAS5BY,EAAAA,QAAQ,EAAEV,eATkB;AAU5BW,EAAAA,YAAY,EAAEZ;AAVc,CAAD,CAA/B;AAaA,MAAMa,oBAAoB,GAAGC,YAAY,CAACC,OAAb,CAAqB,WAArB,IACvBC,IAAI,CAACC,KAAL,CAAWH,YAAY,CAACC,OAAb,CAAqB,WAArB,CAAX,CADuB,GAEvB,EAFN;AAIA,MAAMG,mBAAmB,GAAGJ,YAAY,CAACC,OAAb,CAAqB,UAArB,IACtBC,IAAI,CAACC,KAAL,CAAWH,YAAY,CAACC,OAAb,CAAqB,UAArB,CAAX,CADsB,GAEtB,EAFN;AAIA,MAAMI,0BAA0B,GAAGL,YAAY,CAACC,OAAb,CAAqB,kBAArB,IAC7BC,IAAI,CAACC,KAAL,CAAWH,YAAY,CAACC,OAAb,CAAqB,kBAArB,CAAX,CAD6B,GAE7B,EAFN;AAKA,MAAMK,YAAY,GAAG;AACjBC,EAAAA,SAAS,EAAE;AAAER,IAAAA;AAAF,GADM;AAEjBS,EAAAA,eAAe,EAAE;AAAEH,IAAAA;AAAF,GAFA;AAGjBb,EAAAA,SAAS,EAAE;AAAEiB,IAAAA,QAAQ,EAAEL;AAAZ;AAHM,CAArB;AAKA,MAAMM,UAAU,GAAG,CAAClC,KAAD,CAAnB;AAEA,MAAMmC,KAAK,GAAGtC,WAAW,CACrBe,OADqB,EAErBkB,YAFqB,EAGrB7B,mBAAmB,CAACF,eAAe,CAAC,GAAGmC,UAAJ,CAAhB,CAHE,CAAzB;AAMA,eAAeC,KAAf","sourcesContent":["//This file is where you connect all your reducers & stuff like that. Batman\nimport { createStore, combineReducers, applyMiddleware } from 'redux';\nimport thunk from 'redux-thunk';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport { productListReducer, productDetailsReducer } from './reducers/productReducers';\nimport { cartReducer } from './reducers/cartReducers';\nimport { userLoginReducer, userRegisterReducer, userDetailsReducer, userUpdateProfileReducer } from './reducers/usersReducers';\nimport { orderCreateReducer, orderDetailsReducer, orderPayReducer } from './reducers/orderReducers';\nconst reducer = combineReducers({\n    productList: productListReducer,\n    productDetails: productDetailsReducer,\n    cart: cartReducer,\n    userLogin: userLoginReducer,\n    userRegister: userRegisterReducer,\n    userDetails: userDetailsReducer,\n    userUpdateProfile: userUpdateProfileReducer,\n    orderCreate: orderCreateReducer,\n    orderPay: orderPayReducer,\n    orderDetails: orderDetailsReducer\n})\n\nconst cartItemsFromStorage = localStorage.getItem('cartItems')\n    ? JSON.parse(localStorage.getItem('cartItems'))\n    : []\n\nconst userInfoFromStorage = localStorage.getItem('userInfo')\n    ? JSON.parse(localStorage.getItem('userInfo'))\n    : []\n\nconst shippingAddressFromStorage = localStorage.getItem('shippingAddress ')\n    ? JSON.parse(localStorage.getItem('shippingAddress '))\n    : {}\n\n\nconst initialState = {\n    cartItems: { cartItemsFromStorage },\n    shippingAddress: { shippingAddressFromStorage },\n    userLogin: { userInfo: userInfoFromStorage }\n}\nconst middleware = [thunk]\n\nconst store = createStore(\n    reducer,\n    initialState,\n    composeWithDevTools(applyMiddleware(...middleware))\n)\n\nexport default store;"]},"metadata":{},"sourceType":"module"}